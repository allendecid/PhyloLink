var nwk={};nwk.parser={tokenize:function(a,b){b=b||{"(":/\(/,")":/\)/,":":/:/,";":/;/,",":/,/,NUMBER:/\d+\.*\d*|\.\d+/,STRING:/[a-zA-Z_\+\.\\\-\d'\s\[\]\*\/{}]+/};var c=function(a){var c;return Object.keys(b).some(function(d){var e=new RegExp(b[d]);return a.match(e)?(c=d,!0):void 0}),c},d=0,e="";Object.keys(b).forEach(function(a){var c=b[a];d>0&&(e+="|"),e+="("+c.source+")",d++});for(var f=a.split(new RegExp(e)),g=[],h=0;h<f.length;h++){var i=f[h];i&&g.push({symbol:i,type:c(i)})}return g},parse:function(a){var b;b="[object Array]"===Object.prototype.toString.call(a)?a:this.tokenize(a);var c=0,d=function(){this.id=c++,this.name="",this.branchlength=0,this.children=[]},e=null,f=null,g=b.shift(),h=[],i=function(a){if(g.type===a){var c=g.symbol;return g=b.shift(),c}return!1},j=function(a){var b=g.symbol;if(i(a))return b;throw new Error("Unexpected symbol "+b+", expected "+a)},k=function(){if(i(":")){var a=j("NUMBER");e.branchlength=parseFloat(a)}},l=function(){var a=g.symbol,b="";return(i("STRING")||i("NUMBER"))&&(b=a),b},m=function(){q(),k()},n=function(){for(m();i(",");)m()},o=function(){if(!i("("))throw new Error("Expected (");var a=new d;h.push(a),f||(f=a),n(),j(")");var b=h.pop(),c=l(),g=h[h.length-1]||f;b.name=c,b!==g&&g.addChild(b),e=b},p=function(){var a=l(),b=new d;b.name=a,h.length-1>=0?h[h.length-1].addChild(b):f=b,e=b},q=function(){"("===g.symbol?o():p()},r=function(){return"("===g.symbol?q():m(),j(";"),f},s=function(){return r()};return d.prototype.addChild=function(a){this.children.push(a)},d.prototype.visit=function(a){a(this);for(var b=0;b<this.children.length&&this.children[b].visit(a)!==!1;b++);},d.prototype.clone=function(a){"undefined"==typeof a&&(a=!1);var b=function(a){var b=new d;for(property in a)a.hasOwnProperty(property)&&(b[property]=a[property]);return b.id=c++,b},e=function(a){var c=b(a);c.children=[];for(var d=0;d<a.children.length;d++)c.addChild(e(a.children[d]));return c};return a?e(this):b(this)},s()}},nwk.converter={},nwk.converter.toBinary=function(a){var b=function(a){var b;a.children.length>0&&(b=a.children[0]);for(var c=1;c<a.children.length;c++){var d=a.children[c];d.branchlength<b.branchlength&&(b=d)}return b},c=function(a){if(a.children.length<3)return a;for(var c=a.children,d=b(a),e=[],f=0;f<c.length;f++){var g=c[f];g!==d&&(g.branchlength-=d.branchlength,e.push(g))}var h=a.clone();h.name="",h.branchlength=d.branchlength,h.children=e,a.children=[d,h]},d=a.clone(!0);return d.visit(function(a){c(a)}),d},nwk.converter.toPoly=function(a){var b=function(a){for(var b=0,c=0;c<a.children.length;c++){var d=a.children[c];d.branchlength>.1&&(b=c)}return b},c=function(a){if(!a.children)return a;var c=a.children,d=b(a),e=[];if(0===d||!c[d].children)return a;for(var f=0;f<c[d].children.length;f++){var g=c[d].children[f];e.push(g),a.addChild(g)}console.log(a.children[d].name);var h=a.clone();h.name="",h.branchlength=d.branchlength,h.children=e,console.log(h.children[0])},d=a;return d.visit(function(a){c(a)}),d},nwk.converter.toOneZoom=function(a,b){b=b||!1;var c=function(){this.cname=null,this.name1=null,this.name2=null,this.hasname1=!1,this.hasname2=!1,this.lengthbr=null,this.phylogenetic_diversity=0,this.richness_val=0,this.child1=null,this.child2=null,this.popstab="U",this.redlist="NE"},d=function(a){a=a.replace(/\[/g,"(").replace(/\]/g,")").replace(/\*/g,",");var b=function(a){var b={"{":/{/,"}":/}/,_:/_/,CONS_SYM:/^EX|EW|CR|EN|VU|NT|LC|DD|NE$/,STAB_SYM:/^[U|I|S|D]$/,STRING:/[a-zA-Z\+\.\(\),\\\-\d'\s\/]+/};return nwk.parser.tokenize(a,b)},c=b(a),d=c.shift(),e={commonName:"",genus:"",species:"",stability:"U",conservationStatus:"NE"},f=function(a){if(d&&d.type===a){var b=d.symbol;return d=c.shift(),b}return!1},g=function(a){if(d){var b=d.symbol;if(f(a))return b}return!1},h=function(b){var c=g(b);if(c===!1)throw new Error('Unexpected symbol in "'+a+'", expected '+b)},i=function(){f("_")&&(e.conservationStatus=f("CONS_SYM"),h("_"),e.stability=f("STAB_SYM"))},j=function(){var a=f("STRING");a&&(e.commonName=a)},k=function(){f("{")&&(j(),i(),h("}"))},l=function(){var a=f("STRING");a&&(e.genus=a),g("_")&&(e.species=f("STRING"))},m=function(){l(),k()};return m(),e},e=function(a){var b=new c,e=a.name,f=d(e);return b.cname=f.commonName,b.name1=f.genus,b.name2=f.species,b.popstab=f.stability,b.redlist=f.conservationStatus,b.lengthbr=a.branchlength,b.phylogenetic_diversity=0,b.richness_val=0,b.name1&&(b.hasname1=!0),b.name2&&(b.hasname2=!0),b},f=function(a){var b=function(a){for(var c=e(a),d=0;d<a.children.length;d++)c.addChild(b(a.children[d]));return c};return b(a)};return c.prototype.addChild=function(a){if(null==this.child1)this.child1=a;else if(null==this.child2)this.child2=a;else{if(!b)throw new Error("Can't convert tree to OneZoom - not a binary tree");this.child2=a}},c.prototype.visit=function(a){a(this),this.child1&&this.child1.visit(a),this.child2&&this.child2.visit(a)},f(a)},nwk.converter.toJSON=function(a){return JSON.stringify(a)},nwk.debugger={},nwk.debugger.findNonbinaryNodes=function(a){var b=[];return a.visit(function(a){a.children.length>2&&b.push(a)}),b},nwk.debugger.findUnnamedNodes=function(a){var b=[];return a.visit(function(a){""===a.name&&b.push(a)}),b},nwk.debugger.findUnlengthedNodes=function(a){var b=[];return a.visit(function(a){0==a.branchlength&&b.push(a)}),b},nwk.debugger.findLeaves=function(a){var b=[];return a.visit(function(a){0==a.children.length&&b.push(a)}),b},exports="undefined"!=typeof exports?exports:{},exports.parser=nwk.parser,exports.converter=nwk.converter,exports.debugger=nwk.debugger;
